import{_ as e,c as p,o as s,ag as r,j as a}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"过滤数组中的元素","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/js-06.过滤数组中的元素.md","filePath":"algorithm/js-06.过滤数组中的元素.md"}'),l={name:"algorithm/js-06.过滤数组中的元素.md"};function t(i,n,o,c,_,d){return s(),p("div",null,n[0]||(n[0]=[r('<h1 id="过滤数组中的元素" tabindex="-1">过滤数组中的元素 <a class="header-anchor" href="#过滤数组中的元素" aria-label="Permalink to &quot;过滤数组中的元素&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>给定一个整数数组 arr 和一个过滤函数 fn，并返回一个过滤后的数组 filteredArr 。</p><p>fn 函数接受一个或两个参数：</p><p>arr[i] - arr 中的数字</p><p>i - arr[i] 的索引</p><p>filteredArr 应该只包含使表达式 fn(arr[i], i) 的值为 真值 的 arr 中的元素。真值 是指 Boolean(value) 返回参数为 true 的值。</p><p>请在不使用内置的 Array.filter 方法的情况下解决该问题。</p><p>示例 1：</p>',9),a("p",{return:"",n:"","10;":""},"输入：arr = [0,10,20,30], fn = function greaterThan10(n)",-1),a("p",null,"输出： [20,30]",-1),a("p",null,"解释：",-1),a("p",null,"const newArray = filter(arr, fn); // [20, 30]",-1),a("p",null,"过滤函数过滤掉不大于 10 的值",-1),a("p",null,"示例 2：",-1),a("p",{return:"",i:""},"输入：arr = [1,2,3], fn = function firstIndex(n, i)",-1),a("p",null,"输出：[1]",-1),a("p",null,"解释：",-1),a("p",null,"过滤函数 fn 也可以接受每个元素的索引",-1),a("p",null,"在这种情况下，过滤函数删除索引不为 0 的元素",-1),a("p",null,"示例 3：",-1),a("p",{return:"",n:"","+":"",1:""},"输入：arr = [-2,-1,0,1,2], fn = function plusOne(n)",-1),r(`<p>输出：[-2,0,1,2]</p><p>解释：</p><p>像 0 这样的假值应被过滤掉</p><p>提示：</p><p>0 &lt;= arr.length &lt;= 1000</p><p>-109 &lt;= arr[i] &lt;= 109</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var filter = function(arr, fn) {</span></span>
<span class="line"><span>    let newarr=[];</span></span>
<span class="line"><span>    for(let i=0;i&lt;arr.length;i++){</span></span>
<span class="line"><span>        if(fn(arr[i],i)){</span></span>
<span class="line"><span>            newarr.push(arr[i]);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return newarr;</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>回调函数</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="noreferrer"><code>reduce&amp;map&amp;filter</code></a></p>`,11)]))}const f=e(l,[["render",t]]);export{h as __pageData,f as default};
