import{_ as s,c as e,o as l,ag as n}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"创建 Hello World 函数","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/js-01.创建Hello World函数.md","filePath":"algorithm/js-01.创建Hello World函数.md"}'),o={name:"algorithm/js-01.创建Hello World函数.md"};function t(p,a,r,i,d,c){return l(),e("div",null,a[0]||(a[0]=[n(`<h1 id="创建-hello-world-函数" tabindex="-1">创建 Hello World 函数 <a class="header-anchor" href="#创建-hello-world-函数" aria-label="Permalink to &quot;创建 Hello World 函数&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>请你编写一个名为 createHelloWorld 的函数。它应该返回一个新的函数，该函数总是返回 &quot;Hello World&quot; 。</p><p>示例 1：</p><p>输入：<code>args = []</code></p><p>输出：<code>&quot;Hello World&quot;</code></p><p>解释：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const f = createHelloWorld();</span></span>
<span class="line"><span>f(); // &quot;Hello World&quot;</span></span>
<span class="line"><span>createHelloWorld 返回的函数应始终返回 &quot;Hello World&quot;。</span></span></code></pre></div><h2 id="答案" tabindex="-1">答案: <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案:&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var createHelloWorld = function(){</span></span>
<span class="line"><span>    return function(...args){</span></span>
<span class="line"><span>        return &quot;Hello World&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p><code>...args</code>是 ES6 的新特性<a href="./../damn/css/剩余参数语法糖.html"><strong>剩余参数语法</strong>(<em>Rest Parameters</em>)</a>,将函数中的多个实参自动<strong>打包成一个数组</strong>,写法固定:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function(...args){</span></span>
<span class="line"><span>    console.log(args);//打印出来是个数组</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>和另一个<a href="./../damn/css/展开语法糖.html">展开语法糖(<em>Spread</em>)</a>不同: 那个是拆开数组,而这个是收起</p>`,14)]))}const g=s(o,[["render",t]]);export{u as __pageData,g as default};
