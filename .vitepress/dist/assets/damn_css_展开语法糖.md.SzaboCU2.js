import{_ as s,c as e,o as n,ag as t}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"展开语法糖","description":"","frontmatter":{},"headers":[],"relativePath":"damn/css/展开语法糖.md","filePath":"damn/css/展开语法糖.md"}'),i={name:"damn/css/展开语法糖.md"};function l(o,a,p,c,d,r){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="展开语法糖" tabindex="-1">展开语法糖 <a class="header-anchor" href="#展开语法糖" aria-label="Permalink to &quot;展开语法糖&quot;">​</a></h1><p>用于“展开一个数组、对象或可迭代结构的内容”</p><h2 id="形式" tabindex="-1">形式 <a class="header-anchor" href="#形式" aria-label="Permalink to &quot;形式&quot;">​</a></h2><p>展开语法看起来与<a href="./../../algorithm/js-01.创建Hello World函数.html">剩余参数语法</a>一模一样。</p><p>某种程度上它们完全相反:</p><p>扩展语法是将数组“扩展”为元素，而其余语法是将多个元素收集起来，然后“浓缩”为一个元素。</p><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><ul><li><p><code>...iterable // 在函数调用或数组中展开</code></p></li><li><p><code>...object // 在对象字面量中展开属性</code></p></li></ul><h4 id="函数调用时展开数组" tabindex="-1">函数调用时展开数组 <a class="header-anchor" href="#函数调用时展开数组" aria-label="Permalink to &quot;函数调用时展开数组&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const nums = [1, 2, 3];</span></span>
<span class="line"><span>Math.max(...nums); // 相当于 Math.max(1, 2, 3)</span></span></code></pre></div><h4 id="合并数组" tabindex="-1">合并数组 <a class="header-anchor" href="#合并数组" aria-label="Permalink to &quot;合并数组&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const a = [1, 2];</span></span>
<span class="line"><span>const b = [3, 4];</span></span>
<span class="line"><span>const merged = [...a, ...b]; // [1, 2, 3, 4]</span></span></code></pre></div><h4 id="拷贝数组-浅拷贝" tabindex="-1">拷贝数组(浅拷贝) <a class="header-anchor" href="#拷贝数组-浅拷贝" aria-label="Permalink to &quot;拷贝数组(浅拷贝)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const original = [1, 2, 3];</span></span>
<span class="line"><span>const copy = [...original];</span></span></code></pre></div><h4 id="拆分字符串为字符数组" tabindex="-1">拆分字符串为字符数组 <a class="header-anchor" href="#拆分字符串为字符数组" aria-label="Permalink to &quot;拆分字符串为字符数组&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const word = &#39;hello&#39;;</span></span>
<span class="line"><span>const chars = [...word]; // [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span></code></pre></div><h4 id="对象展开-合并或克隆" tabindex="-1">对象展开(合并或克隆) <a class="header-anchor" href="#对象展开-合并或克隆" aria-label="Permalink to &quot;对象展开(合并或克隆)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const user = { name: &#39;Echo&#39;, age: 21 };</span></span>
<span class="line"><span>const cloned = { ...user };</span></span>
<span class="line"><span>const updated = { ...user, age: 22 }; // 覆盖 age</span></span></code></pre></div>`,18)]))}const b=s(i,[["render",l]]);export{u as __pageData,b as default};
